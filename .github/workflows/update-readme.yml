name: Update Profile README

on:
  schedule:
    # Runs every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  update-readme:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install axios cheerio
        
    - name: Update README with latest repositories
      run: |
        node << 'EOF'
        const fs = require('fs');
        const https = require('https');
        
        // Function to fetch user repositories
        async function fetchRepositories() {
          return new Promise((resolve, reject) => {
            const options = {
              hostname: 'api.github.com',
              port: 443,
              path: '/users/ambicuity/repos?sort=updated&per_page=6&type=public',
              method: 'GET',
              headers: {
                'User-Agent': 'Profile-README-Updater',
                'Accept': 'application/vnd.github.v3+json'
              }
            };
            
            const req = https.request(options, (res) => {
              let data = '';
              res.on('data', (chunk) => {
                data += chunk;
              });
              res.on('end', () => {
                resolve(JSON.parse(data));
              });
            });
            
            req.on('error', (error) => {
              reject(error);
            });
            
            req.end();
          });
        }
        
        async function updateReadme() {
          try {
            const repos = await fetchRepositories();
            let readme = fs.readFileSync('README.md', 'utf8');
            
            // Generate repository showcase
            let repoShowcase = '\n';
            if (repos && repos.length > 0) {
              repoShowcase += '<div align="center">\n\n';
              repoShowcase += '| Repository | Description | Language | Stars | Forks |\n';
              repoShowcase += '|------------|-------------|----------|-------|-------|\n';
              
              repos.slice(0, 6).forEach(repo => {
                const name = repo.name;
                const description = repo.description || 'No description available';
                const language = repo.language || 'N/A';
                const stars = repo.stargazers_count;
                const forks = repo.forks_count;
                const url = repo.html_url;
                
                repoShowcase += `| [${name}](${url}) | ${description.substring(0, 50)}${description.length > 50 ? '...' : ''} | ${language} | ‚≠ê ${stars} | üç¥ ${forks} |\n`;
              });
              
              repoShowcase += '\n</div>\n\n';
              repoShowcase += `*üîÑ Auto-updated ${repos.length} repositories - Showing ${Math.min(6, repos.length)} most recently updated*\n`;
            } else {
              repoShowcase += '*üìÅ Repository showcase will appear here once public repositories are available*\n';
            }
            
            // Update the featured projects section
            const startMarker = '<!-- FEATURED_PROJECTS_START -->';
            const endMarker = '<!-- FEATURED_PROJECTS_END -->';
            const startIndex = readme.indexOf(startMarker);
            const endIndex = readme.indexOf(endMarker);
            
            if (startIndex !== -1 && endIndex !== -1) {
              const before = readme.substring(0, startIndex + startMarker.length);
              const after = readme.substring(endIndex);
              readme = before + repoShowcase + after;
            }
            
            // Update last updated timestamp
            const now = new Date().toISOString().split('T')[0];
            readme = readme.replace(
              /<!-- LAST_UPDATED_START -->.*?<!-- LAST_UPDATED_END -->/s,
              `<!-- LAST_UPDATED_START -->${now}<!-- LAST_UPDATED_END -->`
            );
            
            fs.writeFileSync('README.md', readme);
            console.log('‚úÖ README updated successfully!');
            
          } catch (error) {
            console.error('‚ùå Error updating README:', error);
            process.exit(1);
          }
        }
        
        updateReadme();
        EOF
        
    - name: Update GitHub Activity
      uses: jamesgeorge007/github-activity-readme@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        COMMIT_MSG: 'Update GitHub activity'
        MAX_LINES: 5
        
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "ü§ñ Auto-update profile README"
          git push
        fi